(()=>{"use strict";var e={11:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.unsafeStringify=void 0;const r=n(746),o=[];for(let e=0;e<256;++e)o.push((e+256).toString(16).slice(1));function i(e,t=0){return(o[e[t+0]]+o[e[t+1]]+o[e[t+2]]+o[e[t+3]]+"-"+o[e[t+4]]+o[e[t+5]]+"-"+o[e[t+6]]+o[e[t+7]]+"-"+o[e[t+8]]+o[e[t+9]]+"-"+o[e[t+10]]+o[e[t+11]]+o[e[t+12]]+o[e[t+13]]+o[e[t+14]]+o[e[t+15]]).toLowerCase()}t.unsafeStringify=i,t.default=function(e,t=0){const n=i(e,t);if(!(0,r.default)(n))throw TypeError("Stringified UUID is invalid");return n}},182:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.version=t.validate=t.v7=t.v6ToV1=t.v6=t.v5=t.v4=t.v3=t.v1ToV6=t.v1=t.stringify=t.parse=t.NIL=t.MAX=void 0;var r=n(196);Object.defineProperty(t,"MAX",{enumerable:!0,get:function(){return r.default}});var o=n(465);Object.defineProperty(t,"NIL",{enumerable:!0,get:function(){return o.default}});var i=n(797);Object.defineProperty(t,"parse",{enumerable:!0,get:function(){return i.default}});var f=n(11);Object.defineProperty(t,"stringify",{enumerable:!0,get:function(){return f.default}});var s=n(425);Object.defineProperty(t,"v1",{enumerable:!0,get:function(){return s.default}});var u=n(568);Object.defineProperty(t,"v1ToV6",{enumerable:!0,get:function(){return u.default}});var a=n(591);Object.defineProperty(t,"v3",{enumerable:!0,get:function(){return a.default}});var l=n(286);Object.defineProperty(t,"v4",{enumerable:!0,get:function(){return l.default}});var c=n(557);Object.defineProperty(t,"v5",{enumerable:!0,get:function(){return c.default}});var d=n(356);Object.defineProperty(t,"v6",{enumerable:!0,get:function(){return d.default}});var y=n(268);Object.defineProperty(t,"v6ToV1",{enumerable:!0,get:function(){return y.default}});var b=n(299);Object.defineProperty(t,"v7",{enumerable:!0,get:function(){return b.default}});var p=n(746);Object.defineProperty(t,"validate",{enumerable:!0,get:function(){return p.default}});var h=n(770);Object.defineProperty(t,"version",{enumerable:!0,get:function(){return h.default}})},196:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default="ffffffff-ffff-ffff-ffff-ffffffffffff"},268:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const r=n(797),o=n(11);t.default=function(e){const t=(n="string"==typeof e?(0,r.default)(e):e,Uint8Array.of((15&n[3])<<4|n[4]>>4&15,(15&n[4])<<4|(240&n[5])>>4,(15&n[5])<<4|15&n[6],n[7],(15&n[1])<<4|(240&n[2])>>4,(15&n[2])<<4|(240&n[3])>>4,16|(240&n[0])>>4,(15&n[0])<<4|(240&n[1])>>4,n[8],n[9],n[10],n[11],n[12],n[13],n[14],n[15]));var n;return"string"==typeof e?(0,o.unsafeStringify)(t):t}},286:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const r=n(779),o=n(291),i=n(11);t.default=function(e,t,n){if(r.default.randomUUID&&!t&&!e)return r.default.randomUUID();const f=(e=e||{}).random??e.rng?.()??(0,o.default)();if(f.length<16)throw new Error("Random bytes length must be >= 16");if(f[6]=15&f[6]|64,f[8]=63&f[8]|128,t){if((n=n||0)<0||n+16>t.length)throw new RangeError(`UUID byte range ${n}:${n+15} is out of buffer bounds`);for(let e=0;e<16;++e)t[n+e]=f[e];return t}return(0,i.unsafeStringify)(f)}},291:(e,t)=>{let n;Object.defineProperty(t,"__esModule",{value:!0});const r=new Uint8Array(16);t.default=function(){if(!n){if("undefined"==typeof crypto||!crypto.getRandomValues)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");n=crypto.getRandomValues.bind(crypto)}return n(r)}},299:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.updateV7State=void 0;const r=n(291),o=n(11),i={};function f(e,t,n){return e.msecs??=-1/0,e.seq??=0,t>e.msecs?(e.seq=n[6]<<23|n[7]<<16|n[8]<<8|n[9],e.msecs=t):(e.seq=e.seq+1|0,0===e.seq&&e.msecs++),e}function s(e,t,n,r,o=0){if(e.length<16)throw new Error("Random bytes length must be >= 16");if(r){if(o<0||o+16>r.length)throw new RangeError(`UUID byte range ${o}:${o+15} is out of buffer bounds`)}else r=new Uint8Array(16),o=0;return t??=Date.now(),n??=127*e[6]<<24|e[7]<<16|e[8]<<8|e[9],r[o++]=t/1099511627776&255,r[o++]=t/4294967296&255,r[o++]=t/16777216&255,r[o++]=t/65536&255,r[o++]=t/256&255,r[o++]=255&t,r[o++]=112|n>>>28&15,r[o++]=n>>>20&255,r[o++]=128|n>>>14&63,r[o++]=n>>>6&255,r[o++]=n<<2&255|3&e[10],r[o++]=e[11],r[o++]=e[12],r[o++]=e[13],r[o++]=e[14],r[o++]=e[15],r}t.updateV7State=f,t.default=function(e,t,n){let u;if(e)u=s(e.random??e.rng?.()??(0,r.default)(),e.msecs,e.seq,t,n);else{const e=Date.now(),o=(0,r.default)();f(i,e,o),u=s(o,i.msecs,i.seq,t,n)}return t??(0,o.unsafeStringify)(u)}},338:(e,t)=>{function n(e){return 14+(e+64>>>9<<4)+1}function r(e,t){const n=(65535&e)+(65535&t);return(e>>16)+(t>>16)+(n>>16)<<16|65535&n}function o(e,t,n,o,i,f){return r((s=r(r(t,e),r(o,f)))<<(u=i)|s>>>32-u,n);var s,u}function i(e,t,n,r,i,f,s){return o(t&n|~t&r,e,t,i,f,s)}function f(e,t,n,r,i,f,s){return o(t&r|n&~r,e,t,i,f,s)}function s(e,t,n,r,i,f,s){return o(t^n^r,e,t,i,f,s)}function u(e,t,n,r,i,f,s){return o(n^(t|~r),e,t,i,f,s)}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return function(e){const t=new Uint8Array(4*e.length);for(let n=0;n<4*e.length;n++)t[n]=e[n>>2]>>>n%4*8&255;return t}(function(e,t){const o=new Uint32Array(n(t)).fill(0);o.set(e),o[t>>5]|=128<<t%32,o[o.length-1]=t,e=o;let a=1732584193,l=-271733879,c=-1732584194,d=271733878;for(let t=0;t<e.length;t+=16){const n=a,o=l,y=c,b=d;a=i(a,l,c,d,e[t],7,-680876936),d=i(d,a,l,c,e[t+1],12,-389564586),c=i(c,d,a,l,e[t+2],17,606105819),l=i(l,c,d,a,e[t+3],22,-1044525330),a=i(a,l,c,d,e[t+4],7,-176418897),d=i(d,a,l,c,e[t+5],12,1200080426),c=i(c,d,a,l,e[t+6],17,-1473231341),l=i(l,c,d,a,e[t+7],22,-45705983),a=i(a,l,c,d,e[t+8],7,1770035416),d=i(d,a,l,c,e[t+9],12,-1958414417),c=i(c,d,a,l,e[t+10],17,-42063),l=i(l,c,d,a,e[t+11],22,-1990404162),a=i(a,l,c,d,e[t+12],7,1804603682),d=i(d,a,l,c,e[t+13],12,-40341101),c=i(c,d,a,l,e[t+14],17,-1502002290),l=i(l,c,d,a,e[t+15],22,1236535329),a=f(a,l,c,d,e[t+1],5,-165796510),d=f(d,a,l,c,e[t+6],9,-1069501632),c=f(c,d,a,l,e[t+11],14,643717713),l=f(l,c,d,a,e[t],20,-373897302),a=f(a,l,c,d,e[t+5],5,-701558691),d=f(d,a,l,c,e[t+10],9,38016083),c=f(c,d,a,l,e[t+15],14,-660478335),l=f(l,c,d,a,e[t+4],20,-405537848),a=f(a,l,c,d,e[t+9],5,568446438),d=f(d,a,l,c,e[t+14],9,-1019803690),c=f(c,d,a,l,e[t+3],14,-187363961),l=f(l,c,d,a,e[t+8],20,1163531501),a=f(a,l,c,d,e[t+13],5,-1444681467),d=f(d,a,l,c,e[t+2],9,-51403784),c=f(c,d,a,l,e[t+7],14,1735328473),l=f(l,c,d,a,e[t+12],20,-1926607734),a=s(a,l,c,d,e[t+5],4,-378558),d=s(d,a,l,c,e[t+8],11,-2022574463),c=s(c,d,a,l,e[t+11],16,1839030562),l=s(l,c,d,a,e[t+14],23,-35309556),a=s(a,l,c,d,e[t+1],4,-1530992060),d=s(d,a,l,c,e[t+4],11,1272893353),c=s(c,d,a,l,e[t+7],16,-155497632),l=s(l,c,d,a,e[t+10],23,-1094730640),a=s(a,l,c,d,e[t+13],4,681279174),d=s(d,a,l,c,e[t],11,-358537222),c=s(c,d,a,l,e[t+3],16,-722521979),l=s(l,c,d,a,e[t+6],23,76029189),a=s(a,l,c,d,e[t+9],4,-640364487),d=s(d,a,l,c,e[t+12],11,-421815835),c=s(c,d,a,l,e[t+15],16,530742520),l=s(l,c,d,a,e[t+2],23,-995338651),a=u(a,l,c,d,e[t],6,-198630844),d=u(d,a,l,c,e[t+7],10,1126891415),c=u(c,d,a,l,e[t+14],15,-1416354905),l=u(l,c,d,a,e[t+5],21,-57434055),a=u(a,l,c,d,e[t+12],6,1700485571),d=u(d,a,l,c,e[t+3],10,-1894986606),c=u(c,d,a,l,e[t+10],15,-1051523),l=u(l,c,d,a,e[t+1],21,-2054922799),a=u(a,l,c,d,e[t+8],6,1873313359),d=u(d,a,l,c,e[t+15],10,-30611744),c=u(c,d,a,l,e[t+6],15,-1560198380),l=u(l,c,d,a,e[t+13],21,1309151649),a=u(a,l,c,d,e[t+4],6,-145523070),d=u(d,a,l,c,e[t+11],10,-1120210379),c=u(c,d,a,l,e[t+2],15,718787259),l=u(l,c,d,a,e[t+9],21,-343485551),a=r(a,n),l=r(l,o),c=r(c,y),d=r(d,b)}return Uint32Array.of(a,l,c,d)}(function(e){if(0===e.length)return new Uint32Array;const t=new Uint32Array(n(8*e.length)).fill(0);for(let n=0;n<e.length;n++)t[n>>2]|=(255&e[n])<<n%4*8;return t}(e),8*e.length))}},356:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const r=n(11),o=n(425),i=n(568);t.default=function(e,t,n){e??={},n??=0;let f=(0,o.default)({...e,_v6:!0},new Uint8Array(16));if(f=(0,i.default)(f),t){for(let e=0;e<16;e++)t[n+e]=f[e];return t}return(0,r.unsafeStringify)(f)}},425:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.updateV1State=void 0;const r=n(291),o=n(11),i={};function f(e,t,n){return e.msecs??=-1/0,e.nsecs??=0,t===e.msecs?(e.nsecs++,e.nsecs>=1e4&&(e.node=void 0,e.nsecs=0)):t>e.msecs?e.nsecs=0:t<e.msecs&&(e.node=void 0),e.node||(e.node=n.slice(10,16),e.node[0]|=1,e.clockseq=16383&(n[8]<<8|n[9])),e.msecs=t,e}function s(e,t,n,r,o,i,f=0){if(e.length<16)throw new Error("Random bytes length must be >= 16");if(i){if(f<0||f+16>i.length)throw new RangeError(`UUID byte range ${f}:${f+15} is out of buffer bounds`)}else i=new Uint8Array(16),f=0;t??=Date.now(),n??=0,r??=16383&(e[8]<<8|e[9]),o??=e.slice(10,16);const s=(1e4*(268435455&(t+=122192928e5))+n)%4294967296;i[f++]=s>>>24&255,i[f++]=s>>>16&255,i[f++]=s>>>8&255,i[f++]=255&s;const u=t/4294967296*1e4&268435455;i[f++]=u>>>8&255,i[f++]=255&u,i[f++]=u>>>24&15|16,i[f++]=u>>>16&255,i[f++]=r>>>8|128,i[f++]=255&r;for(let e=0;e<6;++e)i[f++]=o[e];return i}t.updateV1State=f,t.default=function(e,t,n){let u;const a=e?._v6??!1;if(e){const t=Object.keys(e);1===t.length&&"_v6"===t[0]&&(e=void 0)}if(e)u=s(e.random??e.rng?.()??(0,r.default)(),e.msecs,e.nsecs,e.clockseq,e.node,t,n);else{const e=Date.now(),o=(0,r.default)();f(i,e,o),u=s(o,i.msecs,i.nsecs,a?void 0:i.clockseq,a?void 0:i.node,t,n)}return t??(0,o.unsafeStringify)(u)}},465:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default="00000000-0000-0000-0000-000000000000"},536:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ContextManager=void 0;const r=n(182);t.ContextManager=class{constructor(e){if(this.contexts=new Map,this.webGLObject=new Array,this.webGLContext=!1,this.patterns=new Map,this.webGLTypes=[WebGLBuffer,WebGLShader,WebGLProgram,WebGLFramebuffer,WebGLRenderbuffer,WebGLTexture,WebGLUniformLocation],this.add=(e,t)=>{if(!e)throw new Error("Invalid canvas.");if(!this.contexts.get(e.id)){var n;if(!(n=t?e.getContext(this.contextName,t):e.getContext(this.contextName)))throw new Error("Invalid context.");this.contexts.set(e.id,n)}},this.remove=e=>{this.contexts.delete(e.id)},this.setProperty=(e,t,n)=>{const r=this.getContext(e);this.setPropertyWithContext(r,t,n)},this.getProperty=(e,t)=>{const n=this.getContext(e);return this.serialize(n[t])},this.call=(e,t,n)=>{const r=this.getContext(e);return this.callWithContext(r,t,n)},this.callBatch=(e,t)=>{const n=this.getContext(e);for(let e=0;e<t.length;e++){let r=t[e].slice(2);t[e][1]?this.callWithContext(n,t[e][0],r):this.setPropertyWithContext(n,t[e][0],Array.isArray(r)&&r.length>0?r[0]:null)}},this.callWithContext=(e,t,n)=>{const o=this.prototypes[t].apply(e,null!=n?n.map(e=>this.deserialize(t,e)):[]);if("createPattern"==t){const e=(0,r.v4)();return this.patterns.set(e,o),e}return this.serialize(o)},this.setPropertyWithContext=(e,t,n)=>{"fillStyle"==t&&(n=this.patterns.get(n)||n),e[t]=this.deserialize(t,n)},this.getContext=e=>{if(!e)throw new Error("Invalid canvas.");const t=this.contexts.get(e.id);if(!t)throw new Error("Invalid context.");return t},this.deserialize=(e,t)=>{if(!this.webGLContext||null==t)return t;if(t.hasOwnProperty("webGLType")&&t.hasOwnProperty("id"))return this.webGLObject[t.id];if(Array.isArray(t)&&!e.endsWith("v"))return Int8Array.of(...t);if("string"!=typeof t||"bufferData"!==e&&"bufferSubData"!==e)return t;{let e=window.atob(t),r=e.length,o=new Uint8Array(r);for(var n=0;n<r;n++)o[n]=e.charCodeAt(n);return o}},this.serialize=e=>{if(e instanceof TextMetrics)return{width:e.width};if(!this.webGLContext||null==e)return e;const t=this.webGLTypes.find(t=>e instanceof t);if(null!=t){const n=this.webGLObject.length;return this.webGLObject.push(e),{webGLType:t.name,id:n}}return e},this.contextName=e,"2d"===e)this.prototypes=CanvasRenderingContext2D.prototype;else{if("webgl2"!==e&&"experimental-webgl"!==e)throw new Error(`Invalid context name: ${e}`);this.prototypes=WebGL2RenderingContext.prototype,this.webGLContext=!0}}}},557:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.URL=t.DNS=void 0;const r=n(829),o=n(988);var i=n(988);function f(e,t,n,i){return(0,o.default)(80,r.default,e,t,n,i)}Object.defineProperty(t,"DNS",{enumerable:!0,get:function(){return i.DNS}}),Object.defineProperty(t,"URL",{enumerable:!0,get:function(){return i.URL}}),f.DNS=o.DNS,f.URL=o.URL,t.default=f},568:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const r=n(797),o=n(11);t.default=function(e){const t=(n="string"==typeof e?(0,r.default)(e):e,Uint8Array.of((15&n[6])<<4|n[7]>>4&15,(15&n[7])<<4|(240&n[4])>>4,(15&n[4])<<4|(240&n[5])>>4,(15&n[5])<<4|(240&n[0])>>4,(15&n[0])<<4|(240&n[1])>>4,(15&n[1])<<4|(240&n[2])>>4,96|15&n[2],n[3],n[8],n[9],n[10],n[11],n[12],n[13],n[14],n[15]));var n;return"string"==typeof e?(0,o.unsafeStringify)(t):t}},591:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.URL=t.DNS=void 0;const r=n(338),o=n(988);var i=n(988);function f(e,t,n,i){return(0,o.default)(48,r.default,e,t,n,i)}Object.defineProperty(t,"DNS",{enumerable:!0,get:function(){return i.DNS}}),Object.defineProperty(t,"URL",{enumerable:!0,get:function(){return i.URL}}),f.DNS=o.DNS,f.URL=o.URL,t.default=f},697:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-8][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000|ffffffff-ffff-ffff-ffff-ffffffffffff)$/i},746:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const r=n(697);t.default=function(e){return"string"==typeof e&&r.default.test(e)}},770:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const r=n(746);t.default=function(e){if(!(0,r.default)(e))throw TypeError("Invalid UUID");return parseInt(e.slice(14,15),16)}},779:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});const n="undefined"!=typeof crypto&&crypto.randomUUID&&crypto.randomUUID.bind(crypto);t.default={randomUUID:n}},797:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0});const r=n(746);t.default=function(e){if(!(0,r.default)(e))throw TypeError("Invalid UUID");let t;return Uint8Array.of((t=parseInt(e.slice(0,8),16))>>>24,t>>>16&255,t>>>8&255,255&t,(t=parseInt(e.slice(9,13),16))>>>8,255&t,(t=parseInt(e.slice(14,18),16))>>>8,255&t,(t=parseInt(e.slice(19,23),16))>>>8,255&t,(t=parseInt(e.slice(24,36),16))/1099511627776&255,t/4294967296&255,t>>>24&255,t>>>16&255,t>>>8&255,255&t)}},829:(e,t)=>{function n(e,t,n,r){switch(e){case 0:return t&n^~t&r;case 1:case 3:return t^n^r;case 2:return t&n^t&r^n&r}}function r(e,t){return e<<t|e>>>32-t}Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){const t=[1518500249,1859775393,2400959708,3395469782],o=[1732584193,4023233417,2562383102,271733878,3285377520],i=new Uint8Array(e.length+1);i.set(e),i[e.length]=128;const f=(e=i).length/4+2,s=Math.ceil(f/16),u=new Array(s);for(let t=0;t<s;++t){const n=new Uint32Array(16);for(let r=0;r<16;++r)n[r]=e[64*t+4*r]<<24|e[64*t+4*r+1]<<16|e[64*t+4*r+2]<<8|e[64*t+4*r+3];u[t]=n}u[s-1][14]=8*(e.length-1)/Math.pow(2,32),u[s-1][14]=Math.floor(u[s-1][14]),u[s-1][15]=8*(e.length-1)&4294967295;for(let e=0;e<s;++e){const i=new Uint32Array(80);for(let t=0;t<16;++t)i[t]=u[e][t];for(let e=16;e<80;++e)i[e]=r(i[e-3]^i[e-8]^i[e-14]^i[e-16],1);let f=o[0],s=o[1],a=o[2],l=o[3],c=o[4];for(let e=0;e<80;++e){const o=Math.floor(e/20),u=r(f,5)+n(o,s,a,l)+c+t[o]+i[e]>>>0;c=l,l=a,a=r(s,30)>>>0,s=f,f=u}o[0]=o[0]+f>>>0,o[1]=o[1]+s>>>0,o[2]=o[2]+a>>>0,o[3]=o[3]+l>>>0,o[4]=o[4]+c>>>0}return Uint8Array.of(o[0]>>24,o[0]>>16,o[0]>>8,o[0],o[1]>>24,o[1]>>16,o[1]>>8,o[1],o[2]>>24,o[2]>>16,o[2]>>8,o[2],o[3]>>24,o[3]>>16,o[3]>>8,o[3],o[4]>>24,o[4]>>16,o[4]>>8,o[4])}},988:(e,t,n)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.URL=t.DNS=t.stringToBytes=void 0;const r=n(797),o=n(11);function i(e){e=unescape(encodeURIComponent(e));const t=new Uint8Array(e.length);for(let n=0;n<e.length;++n)t[n]=e.charCodeAt(n);return t}t.stringToBytes=i,t.DNS="6ba7b810-9dad-11d1-80b4-00c04fd430c8",t.URL="6ba7b811-9dad-11d1-80b4-00c04fd430c8",t.default=function(e,t,n,f,s,u){const a="string"==typeof n?i(n):n,l="string"==typeof f?(0,r.default)(f):f;if("string"==typeof f&&(f=(0,r.default)(f)),16!==f?.length)throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");let c=new Uint8Array(16+a.length);if(c.set(l),c.set(a,l.length),c=t(c),c[6]=15&c[6]|e,c[8]=63&c[8]|128,s){u=u||0;for(let e=0;e<16;++e)s[u+e]=c[e];return s}return(0,o.unsafeStringify)(c)}}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={exports:{}};return e[r](i,i.exports,n),i.exports}(()=>{const e=n(536);var t;!function(t){const n="BlazorExtensions",r={Canvas2d:new e.ContextManager("2d"),WebGL:new e.ContextManager("webgl2")};t.initialize=function(){"undefined"==typeof window||window[n]?window[n]=Object.assign(Object.assign({},window[n]),r):window[n]=Object.assign({},r)}}(t||(t={})),t.initialize()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,