@using System.Diagnostics
@using System.Numerics
@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D
@using Blazor.Extensions.Canvas.WebGL
@using Microsoft.AspNetCore.Components.Web
@using MudBlazor.Extensions

<div class="w-full h-5/6 flex justify-center items-center background"
     @onclick="HandleClick"
     @onwheel="HandleWheel"
     @onmousedown="HandleMouseDown"
     @onmouseup="HandleMouseUp"
     @onmousemove="HandleMouseMove"
     @onmouseleave="HandleMouseUp"
     tabindex="0">
    <BECanvas Width="1000" Height="1000" @ref="_canvasReference"></BECanvas>
</div>

<!--
<div class="w-full h-1/6 flex justify-center items-center">
    <button @onclick="Rerender">Rerender</button>
    <button @onclick="PrintBenchmark">Print Benchmark</button>
    <button @onclick="StartFpsSimulation">Start FPS Simulation</button>
</div>

<div>
    Frames rendered: @_framesRendered
</div>
<div>
    Average frame render time: @_averageFrameRenderTime ms
</div>
<div>
    Average FPS: @_averageFPS
</div>
<input type="number" class="text-black" @bind-value="_length"/>-->

<style>
    .background {
        background-color: rgb(0.08, 0.08, 0.08);
    }
    
</style>

@code {
    private class Pixel
    {
        public float R { get; set; }
        public float G { get; set; }
        public float B { get; set; }
    }

    private WebGLContext _context;

    private BECanvasComponent _canvasReference;
    private WebGLProgram _program;
    private readonly BenchmarkHelper _benchmarkHelper = new();

    // Caching von WebGL-Objekten und dem Random-Generator
    private WebGLBuffer _pixelBuffer;
    private readonly Random _random = new();
    private Pixel[,] _pixels;

    private uint _vertexPositionAttributeLocation;
    private uint _vertexColorAttributeLocation;

    private WebGLUniformLocation _panUniformLocation;
    private WebGLUniformLocation _zoomUniformLocation;

    private int _framesRendered = 0;
    private double _averageFrameRenderTime = 0;
    private double _averageFPS = 0;

    private int _length = 100;

    // View state
    private float _panX = 0f;
    private float _panY = 0f;
    private float _zoom = 1f;

    // Panning state
    private bool _isPanning;
    private double _lastMouseX;
    private double _lastMouseY;
    private bool _isDragging;

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _context = await _canvasReference.CreateWebGLAsync(new WebGLContextAttributes()
            {
                Antialias = false
            });

            InitializePixelGrid();
            await PrepareScene();
            await RenderScene();
        }
    }

    private void InitializePixelGrid()
    {
        _pixels = new Pixel[_length, _length];
        for (var y = 0; y < _length; y++)
        {
            for (var x = 0; x < _length; x++)
            {
                _pixels[x, y] = new Pixel
                {
                    R = 1,
                    G = 1,
                    B = 1
                };
            }
        }
    }

    private async Task PrepareScene()
    {
        _benchmarkHelper.Start("PrepareScene");
        _program = await CreateShaders();

        await _context.UseProgramAsync(_program);

        _vertexPositionAttributeLocation = (uint)await _context.GetAttribLocationAsync(_program, "vertexPosition");
        _vertexColorAttributeLocation = (uint)await _context.GetAttribLocationAsync(_program, "a_color");
        _panUniformLocation = await _context.GetUniformLocationAsync(_program, "u_pan");
        _zoomUniformLocation = await _context.GetUniformLocationAsync(_program, "u_zoom");


        // Buffer einmalig erstellen
        _pixelBuffer = await _context.CreateBufferAsync();
        await _context.BindBufferAsync(BufferType.ARRAY_BUFFER, _pixelBuffer);

        // Vertex-Attribute einmalig einrichten
        const int stride = 5 * sizeof(float);
        await _context.VertexAttribPointerAsync(_vertexPositionAttributeLocation, 2, DataType.FLOAT, false, stride, 0);
        await _context.EnableVertexAttribArrayAsync(_vertexPositionAttributeLocation);

        await _context.VertexAttribPointerAsync(_vertexColorAttributeLocation, 3, DataType.FLOAT, false, stride, 2 * sizeof(float));
        await _context.EnableVertexAttribArrayAsync(_vertexColorAttributeLocation);

        _benchmarkHelper.Stop("PrepareScene");
    }

    private async Task RenderScene()
    {
        _benchmarkHelper.Start("RenderScene");
        await _context.ViewportAsync(0, 0, 1000, 1000);
        await _context.ClearColorAsync(0, 0, 0, 1);
        await _context.ClearAsync(BufferBits.COLOR_BUFFER_BIT);
        await _context.ClearAsync(BufferBits.DEPTH_BUFFER_BIT);

        await _context.UniformAsync(_panUniformLocation, _panX, _panY);
        await _context.UniformAsync(_zoomUniformLocation, _zoom);

        await DrawPixels();
        _benchmarkHelper.Stop("RenderScene");
    }

    private async Task<WebGLProgram> CreateShaders()
    {
        // ... (Die CreateShaders-Methode bleibt unverändert)
        _benchmarkHelper.Start("CreateShaders");
        var vertexSharedSourceCode = @"#version 300 es
                                     precision mediump float;

                                     in vec2 vertexPosition;
                                     in vec3 a_color;

                                     uniform vec2 u_pan;
                                     uniform float u_zoom;

                                     out vec4 v_color;

                                     void main() {
                                       gl_Position = vec4((vertexPosition * u_zoom) + u_pan, 0.0, 1.0);
                                       v_color = vec4(a_color, 1.0);
                                     }

                                     ";
        var vertexShader = await _context.CreateShaderAsync(ShaderType.VERTEX_SHADER);
        await _context.ShaderSourceAsync(vertexShader, vertexSharedSourceCode);
        await _context.CompileShaderAsync(vertexShader);

        var isVertextShaderCompiled = await _context.GetShaderParameterAsync<bool>(vertexShader, ShaderParameter.COMPILE_STATUS);
        if (!isVertextShaderCompiled)
        {
            var shaderLog = await _context.GetShaderInfoLogAsync(vertexShader);
            Console.WriteLine(shaderLog);
        }


        var fragmentShaderSourceCode = @"#version 300 es
                                     precision mediump float;

                                     in vec4 v_color;

                                     out vec4 outColor;

                                     void main() {
                                       outColor = v_color;
                                     }
                                     ";
        var fragmentShader = await _context.CreateShaderAsync(ShaderType.FRAGMENT_SHADER);
        await _context.ShaderSourceAsync(fragmentShader, fragmentShaderSourceCode);
        await _context.CompileShaderAsync(fragmentShader);

        var isFragmentShaderCompiled = await _context.GetShaderParameterAsync<bool>(fragmentShader, ShaderParameter.COMPILE_STATUS);
        if (!isFragmentShaderCompiled)
        {
            var shaderLog = await _context.GetShaderInfoLogAsync(fragmentShader);
            Console.WriteLine(shaderLog);
        }

        var programm = await _context.CreateProgramAsync();
        await _context.AttachShaderAsync(programm, vertexShader);
        await _context.AttachShaderAsync(programm, fragmentShader);
        await _context.LinkProgramAsync(programm);

        _benchmarkHelper.Stop("CreateShaders");

        var isProgrammLinked = await _context.GetProgramParameterAsync<bool>(programm, ProgramParameter.LINK_STATUS);
        if (isProgrammLinked)
        {
            return programm;
        }

        var programLog = await _context.GetProgramInfoLogAsync(programm);
        Console.WriteLine(programLog);

        throw new Exception("Failed to link the Programm");
    }

    private async Task DrawPixels()
    {
        _benchmarkHelper.Start("DrawPixels");

        var size = (float)_length;

        // Berechnen Sie den sichtbaren Bereich in normalisierten Gerätekoordinaten (NDC)
        var minX_ndc = (-1f - _panX) / _zoom;
        var maxX_ndc = (1f - _panX) / _zoom;

        // Konvertieren Sie den NDC-Bereich in den Gitter-Indexbereich
        var minY_ndc = (-1f - _panY) / _zoom;
        var maxY_ndc = (1f - _panY) / _zoom;

        // Konvertieren Sie den NDC-Bereich in den Gitter-Indexbereich
        var xStart = (int)Math.Floor((minX_ndc + 1f) / 2f * size);
        var xEnd = (int)Math.Ceiling((maxX_ndc + 1f) / 2f * size);
        var yStart = (int)Math.Floor((minY_ndc + 1f) / 2f * size);
        var yEnd = (int)Math.Ceiling((maxY_ndc + 1f) / 2f * size);

        // Klemmen Sie die Indizes auf den gültigen Bereich [0, _length]
        xStart = Math.Max(0, xStart);
        xEnd = Math.Min(_length, xEnd);
        yStart = Math.Max(0, yStart);
        yEnd = Math.Min(_length, yEnd);

        var visibleQuadsX = xEnd - xStart;
        var visibleQuadsY = yEnd - yStart;

        var vertexCount = visibleQuadsX * visibleQuadsY * 6;

        if (vertexCount == 0)
        {
            // Nichts zu zeichnen, da außerhalb des sichtbaren Bereichs
            _benchmarkHelper.Stop("DrawPixels");
            return;
        }

        var vertexData = new float[vertexCount * 5]; // 5 Floats pro Vertex (x, y, r, g, b)
        int index = 0;

        for (int y = yStart; y < yEnd; y++)
        {
            float startY = (y * 2 / size) - 1f;
            float endY = startY + (2 / size);

            for (int x = xStart; x < xEnd; x++)
            {
                float startX = (x * 2 / size) - 1f;
                float endX = startX + (2 / size);

                var pixel = _pixels[x, y];
                var colorR = pixel.R;
                var colorG = pixel.G;
                var colorB = pixel.B;

                // Dreieck 1
                vertexData[index++] = startX;
                vertexData[index++] = startY;
                vertexData[index++] = colorR;
                vertexData[index++] = colorG;
                vertexData[index++] = colorB;
                vertexData[index++] = endX;
                vertexData[index++] = startY;
                vertexData[index++] = colorR;
                vertexData[index++] = colorG;
                vertexData[index++] = colorB;
                vertexData[index++] = startX;
                vertexData[index++] = endY;
                vertexData[index++] = colorR;
                vertexData[index++] = colorG;
                vertexData[index++] = colorB;

                // Dreieck 2
                vertexData[index++] = endX;
                vertexData[index++] = startY;
                vertexData[index++] = colorR;
                vertexData[index++] = colorG;
                vertexData[index++] = colorB;
                vertexData[index++] = endX;
                vertexData[index++] = endY;
                vertexData[index++] = colorR;
                vertexData[index++] = colorG;
                vertexData[index++] = colorB;
                vertexData[index++] = startX;
                vertexData[index++] = endY;
                vertexData[index++] = colorR;
                vertexData[index++] = colorG;
                vertexData[index++] = colorB;
            }
        }

        await _context.BindBufferAsync(BufferType.ARRAY_BUFFER, _pixelBuffer);
        await _context.BufferDataAsync(BufferType.ARRAY_BUFFER, vertexData, BufferUsageHint.DYNAMIC_DRAW);

        await _context.DrawArraysAsync(Primitive.TRIANGLES, 0, vertexCount);

        _benchmarkHelper.Stop("DrawPixels");
    }

    private async Task HandleClick(MouseEventArgs e)
    {
        if (_isDragging)
        {
            return;
        }

        // Konvertieren der Mauskoordinaten in den Clip-Space von WebGL (-1 bis 1)
        // Die Y-Koordinate wird invertiert, da die Bildschirmkoordinaten (0,0 oben links) und der WebGL Clip Space (0,0 in der Mitte, -1,-1 unten links) unterschiedlich sind.
        var clipX = (float)(e.OffsetX / _canvasReference.Width) * 2f - 1f;
        var clipY = 1f - (float)(e.OffsetY / _canvasReference.Height) * 2f;

        // Transformation vom Clip-Space in den World-Space (den Raum unseres Gitters, von -1 bis 1), unter Berücksichtigung von Pan und Zoom
        var worldX = (clipX - _panX) / _zoom;
        var worldY = (clipY - _panY) / _zoom;

        // Überprüfen, ob der Klick außerhalb des World-Space [-1, 1] liegt
        if (worldX < -1f || worldX > 1f || worldY < -1f || worldY > 1f)
        {
            return;
        }

        // Konvertieren von World-Space-Koordinaten in Gitter-Koordinaten
        var gridX = (int)Math.Floor((worldX + 1f) / 2f * _length);
        var gridY = (int)Math.Floor((worldY + 1f) / 2f * _length);

        // Überprüfen, ob die Gitter-Koordinaten gültig sind
        if (gridX >= 0 && gridX < _length && gridY >= 0 && gridY < _length)
        {
            var pixel = _pixels[gridX, gridY];
            pixel.R = (float)1;
            pixel.G = (float)0;
            pixel.B = (float)0;

            await Rerender();
        }
    }

    private Task HandleWheel(WheelEventArgs e)
    {
        if (e.DeltaY > 0)
        {
            _zoom *= 0.9f;
        }
        else
        {
            _zoom *= 1.1f;
        }

        return Rerender();
    }

    private void HandleMouseDown(MouseEventArgs e)
    {
        _isPanning = true;
        _isDragging = false;
        _lastMouseX = e.ClientX;
        _lastMouseY = e.ClientY;
    }

    private void HandleMouseUp(MouseEventArgs e)
    {
        _isPanning = false;
    }

    private Task HandleMouseMove(MouseEventArgs e)
    {
        if (!_isPanning)
        {
            return Task.CompletedTask;
        }

        _isDragging = true;

        var dx = (float)(e.ClientX - _lastMouseX);
        var dy = (float)(e.ClientY - _lastMouseY);

        _panX += dx * 2f / _canvasReference.Width;
        _panY -= dy * 2f / _canvasReference.Height;

        _lastMouseX = e.ClientX;
        _lastMouseY = e.ClientY;

        return Rerender();
    }


    private async Task Rerender()
    {
        await RenderScene();
    }

    private void PrintBenchmark()
    {
        _benchmarkHelper.Print();
    }

    private async Task StartFpsSimulation()
    {
        InitializePixelGrid();
        
        Stopwatch stopwatch = Stopwatch.StartNew();

        var runs = 0;
        var waitTime = TimeSpan.FromSeconds(10).TotalMilliseconds;

        while (stopwatch.ElapsedMilliseconds < waitTime)
        {
            await RenderScene();
            await Task.Delay(1);
            runs += 1;
        }

        stopwatch.Stop();

        _framesRendered = runs;
        _averageFrameRenderTime = waitTime / runs;
        _averageFPS = 1000 / _averageFrameRenderTime;
    }

}